{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get_state",
				"get_state_map"
			],
			[
				"a",
				"advance"
			],
			[
				"io",
				"io_map"
			],
			[
				"oir",
				"orig_state"
			],
			[
				"get",
				"get_key"
			],
			[
				"out",
				"outpair"
			],
			[
				"io_",
				"io_map"
			],
			[
				"state",
				"state_map"
			],
			[
				"curr",
				"currpair"
			],
			[
				"k",
				"get_key"
			],
			[
				"v",
				"verbose"
			],
			[
				"dump",
				"dump_stats"
			],
			[
				"dum",
				"dump_stats"
			],
			[
				"MAX",
				"MAX_TIME"
			],
			[
				"IF",
				"ifdef"
			],
			[
				"cover",
				"cover_size"
			],
			[
				"de",
				"decision_tree"
			],
			[
				"comput",
				"compute_compat"
			],
			[
				"patho",
				"pathological_tree"
			],
			[
				"map",
				"map1"
			],
			[
				"t",
				"tree_size"
			],
			[
				"min",
				"mincliques"
			],
			[
				"MAX_",
				"MAX_STATES"
			],
			[
				"DE",
				"DEPTH"
			],
			[
				"DEP",
				"DEPTH_STEP"
			],
			[
				"state_",
				"state_map"
			],
			[
				"num",
				"num_states"
			],
			[
				"sta",
				"state_map"
			],
			[
				"it",
				"iterator"
			],
			[
				"CLI",
				"CLIQUER_SRC"
			],
			[
				"CLIQUER",
				"CLIQUER_SOURCE_DIR"
			],
			[
				"cur",
				"curr_set"
			],
			[
				"s",
				"set"
			],
			[
				"e",
				"end"
			],
			[
				"num_",
				"num_singletons"
			],
			[
				"cloc",
				"clock_t"
			],
			[
				"ge",
				"get_key"
			],
			[
				"treef",
				"treefile0"
			],
			[
				"po",
				"poisson_distribution"
			],
			[
				"las",
				"last_key"
			],
			[
				"last",
				"last_key"
			],
			[
				"lit",
				"list_advance"
			],
			[
				"nex",
				"next_key"
			],
			[
				"free",
				"free_keys"
			],
			[
				"cover_",
				"cover_exact"
			],
			[
				"reduc",
				"reduce_exact"
			],
			[
				"find",
				"find_state"
			],
			[
				"add",
				"add_io_map"
			],
			[
				"clique",
				"clique_map"
			],
			[
				"state_map",
				"state_map_t"
			],
			[
				"new_",
				"new_state"
			],
			[
				"new",
				"new_state"
			],
			[
				"redu",
				"reduce_exact"
			],
			[
				"mincov",
				"MINCOV_DIR"
			],
			[
				"erase",
				"erase_list"
			],
			[
				"era",
				"erase_list"
			],
			[
				"emul",
				"emulation"
			],
			[
				"em",
				"emulation_depth"
			],
			[
				"cli",
				"clique_map"
			],
			[
				"se",
				"second"
			],
			[
				"compat",
				"compat_t"
			],
			[
				"beg",
				"begin"
			],
			[
				"const",
				"const_iterator"
			],
			[
				"to",
				"top_it"
			],
			[
				"top",
				"top_state"
			],
			[
				"re",
				"redux"
			],
			[
				"old",
				"old_depth"
			],
			[
				"get_",
				"get_depth"
			],
			[
				"ou",
				"outpair"
			],
			[
				"old_",
				"old_depth"
			],
			[
				"c",
				"c_str"
			],
			[
				"j",
				"js"
			],
			[
				"skey",
				"skey_t"
			],
			[
				"ske",
				"skey_t"
			],
			[
				"key",
				"getKey"
			],
			[
				"tree",
				"treefile"
			],
			[
				"net",
				"newtoken"
			],
			[
				"o",
				"ostream"
			],
			[
				"edge",
				"edgestring"
			],
			[
				"be",
				"begin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 5440,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/reduce_censi.cpp",
			"settings":
			{
				"buffer_size": 2955,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/reduce_alberto.cpp",
			"settings":
			{
				"buffer_size": 3849,
				"line_ending": "Unix",
				"name": "// find  maximum independent set"
			}
		},
		{
			"file": "src/reduce_exact.cpp",
			"settings":
			{
				"buffer_size": 2769,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Graph.h",
			"settings":
			{
				"buffer_size": 2920,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/reduce_josh.cpp",
			"settings":
			{
				"buffer_size": 727,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/fsm.h",
			"settings":
			{
				"buffer_size": 3341,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"fsm.h\"\n\n/* skey_t member functions */\nskey_t::skey_t(){\n	keynum = -1;\n}\n\nskey_t::skey_t(int new_keynum){\n	keynum = new_keynum;\n}\n\nbool skey_t::operator<(const skey_t& right) const {		\n		return keynum<right.keynum;\n}\n\nbool skey_t::operator==(const skey_t& right) const {		\n		return keynum==right.keynum;\n}\n\nistream& operator>>(istream& in, skey_t& right){\n	string temp;\n	in >> temp;\n\n	istringstream iss(temp.substr(1));\n\n	iss >> right.keynum;\n\n	return in;\n}\n\nostream& operator<<(ostream& out, const skey_t& right){\n	out << \"q\" << right.keynum;\n\n	return out;\n}\n\n/* FSM member functions */\n\nfsm::fsm(string filename){\n	ifstream in(filename.c_str());\n	in >> (*this);\n	in.close();\n}\n\nstate& fsm::add_state(){\n	skey_t new_key(state_map.size());\n	// cout << \"Created key \" << new_key << endl;\n	return add_state(new_key);\n}\n\nstate& fsm::add_state(skey_t new_key){\n	return state_map.insert(pair<skey_t, state>(new_key, state(new_key))).first->second;\n}\n\nstate& fsm::find_state(skey_t query_key) {\n	return state_map.find(query_key)->second;\n}\n\noutpair fsm::operate(in_t input, ostream& out){\n	outpair op = (*active_state)(input);\n	active_state = &find_state(op.state);\n\n	if(out != NULL){\n		out << \"(\" << input << \" -> \";\n		if(op.output==UNDEFINED)\n			out << \"UNDEFINED\";\n		else \n			out << op.output;\n		out << \" @ \" << op.state << \") \";\n}\n	return op;\n}\n\nvector<outpair> fsm::operate(const vector<in_t>& in_vec, ostream& out){\n	vector<outpair> op_vec;\n	for(int i=0; i<in_vec.size(); i++){\n		in_t curr_in = in_vec[i];\n		outpair curr_op = operate(curr_in, out);\n		op_vec.push_back(curr_op);	\n	}\n	out << \"\\n\\n\";\n\n	return op_vec;\n}\n\nskey_t fsm::get_active_state() const{\n	return active_state->key;\n}\n\nskey_t fsm::get_initial_state() const{\n	return initial_state;\n}\n\nvoid fsm::reset(){\n	active_state = &find_state(initial_state);\n}\n\nbool test_compat(skey_t k1, skey_t k2, const compat_t& compat) {\n	if(k1==k2)\n		return true;\n\n	const set<skey_t>	&ks1 = compat.find(k1)->second,\n						&ks2 = compat.find(k2)->second;\n\n    set<skey_t>::iterator it1 = ks1.find(k2), it2 = ks2.find(k1);\n	return (it1 != ks1.end()) || (it2 != ks2.end());\n}\n\nbool test_compat(state& s1, state& s2, const compat_t& compat) {\n	if(!s1.test_io_map(s2))\n		return false;\n\n	const io_map_t& io_map = s1.get_io_map();\n	for(io_map_t::const_iterator it = io_map.begin(); it != io_map.end(); it++){\n		outpair op2 = s2(it->first);		\n		if(op2.output==UNDEFINED)\n			continue;\n\n		skey_t	k1 = it->second.state,\n				k2 = op2.state;	\n\n		if(!test_compat(k1, k2, compat)){\n			// cout << s1.key << \", \" << s2.key << \" (\" << it->first << \"):  \" << k1 << \", \" << k2 << endl;\n			return false;\n		}\n	}\n	return true;\n}\n\nbool iterate_compat(compat_t& compat, fsm& orig){\n	//print_compat(cout);\n\n	bool changed = false;\n	for(compat_t::iterator it = compat.begin(); it != compat.end(); it++){		\n\n		set<skey_t>& key_set = it->second;\n		for(set<skey_t>::iterator kit = key_set.begin(); kit != key_set.end(); kit++){\n			if(!test_compat(orig.find_state(it->first), orig.find_state(*kit), compat)){\n//			if(!test_compat(it->first, *kit)){\n\n				changed = true;\n				key_set.erase(*kit);\n			}\n		}\n	}\n\n	return changed;\n}\n\ncompat_t compute_compat(fsm& f){\n\n	compat_t compat;\n\n	const state_map_t& sm = f.get_state_map();\n\n	for(state_map_t::const_iterator it = sm.begin(); it != sm.end(); it++){	\n		compat[it->first] = set<skey_t>();\n		set<skey_t>& key_set = compat[it->first];\n		for(state_map_t::const_iterator jt = sm.begin(); jt != it; jt++)\n			key_set.insert(jt->first);\n	}\n\n	while(iterate_compat(compat, f));\n\n	return compat;\n}\n\n/* I/O routines */\n\nistream& operator>> (istream& in, fsm& right){\n	string temp, new_line, line_head;\n	if(in>>temp && temp==\"fsm\" && in>>right.initial_state){\n		in.ignore();\n\n		state* curr_state;\n		while(getline(in, new_line)){\n			stringstream ss(new_line);\n			\n			in_t new_in;\n			out_t new_out;\n			skey_t new_key;\n\n			ss >> line_head;\n			if(line_head==\"state\" && ss>>new_key)\n				curr_state = &right.add_state(new_key);\n			else{\n				string in_string, out_string, key_string;\n\n				stringstream ms(new_line);\n				if(		getline(ms, in_string, ':') && \n						getline(ms, out_string, '@') &&	\n						getline(ms, key_string)){\n					\n					stringstream in_stream(in_string), \n								 out_stream(out_string), \n								 key_stream(key_string);\n\n					if(in_stream>>new_in && out_stream >> new_out && key_stream >> new_key)\n						curr_state->add_io_map(new_in, outpair(new_out, new_key));\n				}\n			}\n		}\n	}\n\n	return in;\n}\n\nostream& operator<< (ostream& out, const fsm& right){\n	out << \"fsm \" << right.initial_state << endl;\n	state_map_t state_map = right.state_map;\n	for(state_map_t::const_iterator sit = state_map.begin(); sit != state_map.end(); sit++){\n		const state& curr_state = sit->second;\n		out << curr_state;\n	}\n	return out;\n}\n\nostream& operator<<(ostream& out, const compat_t& right){\n	for(compat_t::const_iterator it = right.begin(); it != right.end(); it++){\n		out << it->first << \": \";\n		const set<skey_t>& key_set = it->second;\n		for(set<skey_t>::iterator kit = key_set.begin(); kit !=key_set.end(); kit++)\n		out << *kit << \" \";\n		out << endl;\n	}\n	out << endl;\n\n	return out;\n}\n\nvoid save_dot(string filename, const fsm& right){\n	ofstream out(filename.c_str());\n	right.save_dot(out);\n	out.close();\n}\n\n\nvoid fsm::save_dot(ostream& out) const{\n	const int width  = 80, height = 10;\n\n	string arctxt = \"->\",\n		labeltxt = \"[label=\\\"%s\\\", color=\\\"red\\\", fontname=\\\"NimbusMonL-Regu\\\", labeljust=\\\"r\\\", fontsize=10]\",\n		edgeformat = \"  %d \" + arctxt + \" %d \" + labeltxt + \";\\n\";\n\n	out << \"digraph G {\\n\";\n	out << \"  center=1;\\n\";\n	out << \"  size=\\\"\" << width << \",\" << height << \"\\\";\\n\";\n\n	int node_index = 0;\n	map<skey_t, int> node_indices;\n	for(state_map_t::const_iterator it = state_map.begin(); it!=state_map.end(); it++){		\n		skey_t found_key = it->first;\n		node_indices[found_key] = node_index;\n		out << \"  \" << node_index << \" [label=\\\"\" << found_key << \"\\\", shape=\\\"circle\\\"];\\n\";\n		node_index++;\n	}\n\n	int node1_index = 0;\n	for(state_map_t::const_iterator it = state_map.begin(); it!=state_map.end(); it++){\n		map<skey_t, string> edge_labels;\n		const state& found_state = it->second;\n		io_map_t found_map = found_state.io_map;\n		for(io_map_t::iterator jt = found_map.begin(); jt!=found_map.end(); jt++){\n			outpair op = jt->second;\n			stringstream ss;\n			ss << jt->first << \":\" << op.output << \"\\\\n\";\n			edge_labels[op.state] += ss.str(); \n		}\n		for(map<skey_t, string>::iterator jt = edge_labels.begin(); jt!=edge_labels.end(); jt++){			\n			int node2_index = node_indices[jt->first];\n			char edgestring[200];		\n			sprintf(edgestring, edgeformat.c_str(), node1_index, node2_index, jt->second.c_str());\n			out << edgestring;			\n		}		\n		node1_index++;\n	}\n	out << \"}\\n\";\n}\n\nostream& operator<<(ostream& out, const cover_t& right){\n\n	for(int i=0; i<right.size(); i++){\n		const set<skey_t>& curr = right[i];\n		cout << \"{ \";\n\n		for(set<skey_t>::const_iterator it = curr.begin(); it!=curr.end(); it++)\n			cout << *it << \" \";\n\n		cout << \"} \";\n	}\n\n	return out;\n}\n\n\ntypedef map<skey_t, skey_t> clique_map_t;\n\nfsm reduce(fsm& orig, const cover_t& X){\n	fsm temp;\n\n	/* Compute name reassignments */\n	clique_map_t clique_map;\n	for(int i=0; i<X.size(); i++){\n		state& new_state = temp.add_state();\n		skey_t new_key = new_state.get_key();\n		for(set<skey_t>::const_iterator it = X[i].begin(); it!=X[i].end(); it++){\n			clique_map[*it] = new_key;\n			new_state.add_io_map(orig.find_state(*it));\n		}\n	}\n\n	state_map_t& sm = temp.get_state_map();\n	for(state_map_t::iterator it = sm.begin(); it!=sm.end(); it++){\n		state& curr = it->second;\n		io_map_t& im = curr.get_io_map();\n\n		for(io_map_t::iterator jt = im.begin(); jt!=im.end(); jt++){\n			jt->second.state = clique_map[jt->second.state];\n		}\n	}\n\n	temp.set_initial_state(clique_map[orig.get_initial_state()]);\n\n	return temp;\n}\n\n\nbool add_to_clique_symmetric(skey_t new_entry, set<skey_t>& new_clique, const compat_t& compat){\n	//cout << \"Adding \" << new_entry << \" to clique (\" << new_clique << \").\\n\";\n\n	for(set<skey_t>::iterator it = new_clique.begin(); it!=new_clique.end(); it++){	\n		compat_t::const_iterator mi = compat.find(*it);\n\n		const set<skey_t>& kr = mi->second;\n\n		if(kr.find(new_entry)==kr.end())\n			return false;\n	}\n\n	new_clique.insert(new_entry);\n	return true;\n}\n\nbool add_to_clique(skey_t new_entry, set<skey_t>& new_clique, const compat_t& compat){\n	//cout << \"Adding \" << new_entry << \" to clique (\" << new_clique << \").\\n\";\n\n	compat_t::const_iterator mi = compat.find(new_entry);\n	const set<skey_t>& kc = mi->second;\n\n	for(set<skey_t>::iterator it = new_clique.begin(); it!=new_clique.end(); it++){	\n		compat_t::const_iterator mi = compat.find(*it);\n\n		const set<skey_t>& kr = mi->second;\n\n		if(kr.find(new_entry)==kr.end() && kc.find(*it)==kc.end())\n			return false;\n	}\n\n	new_clique.insert(new_entry);\n	return true;\n}\n\nvoid symmetrize(compat_t& compat){\n	for(compat_t::iterator it = compat.begin(); it!=compat.end(); it++){\n		skey_t curr_key = it->first;\n		set<skey_t>& curr_set = it->second;\n		for(set<skey_t>::iterator jt = curr_set.begin(); jt!=curr_set.end(); jt++){\n			set<skey_t>& neighbor_set = compat[*jt];\n\n			neighbor_set.insert(curr_key);\n		}\n	}\n}\n\nbool verify_cover(compat_t& ct, cover_t& X){\n	int cover_size = 0;\n	// cout << endl;\n	for(int i=0; i<X.size(); i++){\n		// cout << X[i].size() << \" \";\n		cover_size += X[i].size();\n	}\n	// cout << endl;\n\n	return (cover_size==ct.size());\n}\n\nfloat density(compat_t& compat){\n	symmetrize(compat);\n\n	int count = 0;\n	for(compat_t::const_iterator it = compat.begin(); it!=compat.end(); it++){\n		count+= it->second.size();\n	}\n\n	return count/((float) compat.size()*compat.size());\n}",
			"file": "src/fsm.cpp",
			"file_size": 10131,
			"file_write_time": 130575715230455168,
			"settings":
			{
				"buffer_size": 9641,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pathological_tree.cpp",
			"settings":
			{
				"buffer_size": 1639,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/poisson_fsm.cpp",
			"settings":
			{
				"buffer_size": 1427,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"command_palette":
	{
		"height": 348.0,
		"selected_items":
		[
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"sublimeg",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"sublime",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"sublim",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"sublimegdb",
				"SublimeGDB: Pause"
			],
			[
				"settings",
				"Preferences: Settings - User"
			],
			[
				"project ",
				"Project: Add Folder"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 214.0,
		"history":
		[
			"exec pwd",
			"!pwd",
			"pwd",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/josh/git/rep-redux/cpp",
		"/home/josh/git/rep-redux/cpp/data",
		"/home/josh/git/rep-redux/cpp/include",
		"/home/josh/git/rep-redux/cpp/src",
		"/home/josh/git/rep-redux/cpp/thirdparty",
		"/home/josh/git/rep-redux/cpp/thirdparty/cliquer-1.21"
	],
	"file_history":
	[
		"/home/josh/git/rep-redux/cpp/build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c",
		"/home/josh/git/rep-redux/cpp/build/CMakeFiles/progress.marks",
		"/home/josh/git/rep-redux/cpp/CMakeLists.txt",
		"/home/josh/git/rep-redux/cpp/src/fsm.cpp",
		"/home/josh/git/rep-redux/cpp/src/Graph.cpp",
		"/home/josh/git/rep-redux/cpp/stats/data-02.txt",
		"/home/josh/git/rep-redux/cpp/src/reduce_greedy.cpp",
		"/home/josh/git/rep-redux/cpp/src/poisson_fsm.cpp",
		"/home/josh/git/rep-redux/cpp/src/reduce_censi.cpp",
		"/home/josh/git/rep-redux/cpp/src/state.cpp",
		"/home/josh/git/rep-redux/cpp/src/decision_tree.cpp",
		"/home/josh/git/rep-redux/cpp/rep-redux.sublime-project",
		"/build/buildd/eglibc-2.19/nptl/sysdeps/unix/sysv/linux/raise.c",
		"/home/josh/git/rep-redux/cpp/src/reduce_exact.cpp",
		"/home/josh/git/rep-redux/cpp/src/reduce_josh_exhaustive.cpp",
		"/home/josh/git/rep-redux/cpp/src/emulation.cpp",
		"/usr/include/c++/4.6/bits/stl_tree.h",
		"/home/josh/.config/sublime-text-3/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/home/josh/git/rep-redux/cpp/Makefile",
		"/home/josh/git/rep-redux/src/reduce_censi.cpp",
		"/home/josh/.config/sublime-text-3/Packages/User/SublimeGDB.sublime-settings",
		"/home/josh/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/josh/git/rep-redux/src/decision_tree.cpp",
		"/home/josh/git/rep-redux/src/main.cpp",
		"/home/josh/git/rep-redux/src/fsm.cpp",
		"/home/josh/git/rep-redux/src/rep-redux.h",
		"/home/josh/.config/sublime-text-3/Packages/User/Plain text.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"cout",
			"cout << endl",
			"operator<<",
			"graph",
			">());\n",
			">\n",
			"print_compat",
			"CMAKE_INCLUDE_PATH",
			"; ",
			" ",
			"trace",
			"cout",
			":\";",
			"add_io",
			", true)",
			"advance_over",
			"step_out(",
			"stack.pop_back()",
			"step_",
			"begin()",
			"top().second",
			"getKey",
			"decision_tree",
			"decision_tree::df_iterator",
			"doto",
			"dotf",
			"dot",
			"step_in",
			"operator<<",
			"key_t",
			"top()",
			"push",
			"top()",
			"top",
			"decision_tree::",
			"decision_tree::df_iterator"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" ",
			"",
			";",
			"; ",
			"trace_t",
			")",
			"step_over",
			"step_out()",
			"top_state()",
			"get_key",
			"df_iterator",
			"_dot_o",
			"_dot_f",
			"_dot_",
			"skey_t",
			"",
			"df_iterator"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5440,
						"regions":
						{
						},
						"selection":
						[
							[
								347,
								347
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/reduce_censi.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2955,
						"regions":
						{
						},
						"selection":
						[
							[
								79,
								79
							]
						],
						"settings":
						{
							"spell_check": false,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/reduce_alberto.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3849,
						"regions":
						{
						},
						"selection":
						[
							[
								2858,
								2858
							]
						],
						"settings":
						{
							"auto_name": "// find  maximum independent set",
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1710.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/reduce_exact.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2769,
						"regions":
						{
						},
						"selection":
						[
							[
								1189,
								1189
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "include/Graph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2920,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/reduce_josh.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 727,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "include/fsm.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3341,
						"regions":
						{
						},
						"selection":
						[
							[
								2958,
								2958
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1711.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/fsm.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9641,
						"regions":
						{
						},
						"selection":
						[
							[
								464,
								464
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/pathological_tree.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1639,
						"regions":
						{
						},
						"selection":
						[
							[
								247,
								247
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/poisson_fsm.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1427,
						"regions":
						{
						},
						"selection":
						[
							[
								401,
								401
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 113.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				3,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			],
			[
				2,
				1,
				3,
				2
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.66,
			1.0
		],
		"rows":
		[
			0.0,
			0.75,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 222.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "rep-redux.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/git/rep-redux/cpp/rep-redux.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
